das
sd
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
p<-lm(y~x)
summary(p)
summary(p$residual)
p
lm(mpg~wt, data = mtcars)
summary(lm(mpg~wt, data = mtcars))
summary(glm(mpg~wt, data = mtcars))
p<- glm(mpg~wt, data = mtcars)
summary(p)
p
mean(mtcars$wt)
p<- glm(mpg~wt+cyl, data = mtcars)
summary(p)
p2<- glm(mpg~cyl, data = mtcars)
summary(p2)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit<-lm(y~x)
round(dfbetas(fit)[1:10,2],3)
round(dfbetas(fit)[1:4,2],3)
round(dfbetas(fit))
round(hatvalues(fit))
round(hatvalues(fit)[1:4,2],3)
round(hatvalues(fit)[1:4,2],3)
round(hatvalues(fit)[1:4,1],3)
round(hatvalues(fit)[1:4],3)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit<-lm(y~x)
round(dfbetas(fit)[1:4,2],3)
plot(x, y)
abline(fit)
kibrary(MASS)
library(MASS)
data(shuttle)
View(shuttle)
shuttle$use1<-ifelse(shuttle$use=="auto", 1, 0)
View(shuttle)
fit<-glm(use1~wind, data = shuttle)
summary(fit)
fit<-glm(use1~wind, data = shuttle, family="binomial")
summary(fit)
fit<-glm(use1~wind+magn, data = shuttle, family="binomial")
summary(fit)
fit<-glm((1-use1)~wind+magn, data = shuttle, family="binomial")
summary(fit)
data(InsectSprays)
?glm
View(InsectSprays)
fit<-glm(count~spray, data = InsectSprays, family = "poisson")
summary(fit)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x, y)
data(mtcars)
View(mtcars)
?mtcars
?log
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
install.packages("Caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("aret")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData=data.frame(diagnosis, predictors)
trainIndex=createDataPartition(diagnosis, p=0.50, list=FALSE)
training=adData[trainIndex,]
testing=adData[-trainIndex,]
View(training)
View(testing)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(ggplot2)
View(training)
qplot(CompressiveStrength, inTrain)
qplot(training$CompressiveStrength, inTrain)
qplot(training$CompressiveStrength, inTrain, colour = training$variablenames)
qplot(training$CompressiveStrength, inTrain, colour = names(training))
qplot(training$CompressiveStrength, inTrain, colour = training$age
)
qplot(training$CompressiveStrength, inTrain, colour =age, data = training)
qplot(training$CompressiveStrength, inTrain, colour =Age, data = training)
qplot(training$CompressiveStrength, inTrain, colour =FlyAsh, data = training)
qplot(training$CompressiveStrength, inTrain, colour =row.names, data = training)
cut2(training$row.names)
library(Hmisc)
cut2(training$row.names)
?cut2
cut2(training$row.names, cuts = 4)
str(training$row.names)
View(training$row.names)
View(training$Cement)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(training$SuperPlasticizer)
View(training)
plot(training$Superplasticizer)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
View(log(training$Superplasticizer))
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?preProcess
View(training)
preObj<-preProcess(training[, IL], method=c("pca"))
preObj<-preProcess(training[,IL], method=c("pca"))
preObj<-preProcess(training[,"IL"], method=c("pca"))
preObj<-preProcess(training[,grepl("IL)], method=c("pca"))
preObj<-preProcess(training[,grepl("IL")], method=c("pca"))
preObj<-preProcess(training[grepl("IL"),], method=c("pca"))
?grepl
rownames<-names(training)
View(rownames)
preObj<-preProcess(training[grepl("IL", rownames),], method=c("pca"))
preObj<-preProcess(training[,grepl("IL", rownames)], method=c("pca"))
View(preObj)
preObj
preProcess
?preProcess
preObj<-preProcess(training[,grepl("IL", rownames)], method=c("pca"), thresh=0.80)
preObj
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training=training[, grepl("IL", rownames)]
View(training)
preObj<-preProcess(training, method=c("pca"), thresh=0.80)
preObj
modelFit<-train(training~., method="glm")
modelFit<-train(training$diagnosis~., method="glm", data = training)
training=training[, grepl("IL"|"diagnosis", rownames)]
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preObj<-preProcess(training[,grepl("IL", rownames)], method=c("pca"))
modelFit<-train(training$diagnosis~., method="glm", data = training)
View(training)
confusionMatrix(testing$diagnosis, predict(modelFit))
confusionMatrix(testing$diagnosis, predict(preObj))
testPC<-predict(preProc, log10(testing))
confusionMatrix(testing$diagnosis, preObj))
?confusionMatrix
confusionMatrix(data = testing, reference = testing$diagnosis, predict(preObj))
confusionMatrix(data = testing, reference = testing$diagnosis, preObj)
testPC<-predict(preProc)
testPC<-predict(preObj)
testPC<-predict(preObj, testing)
testPC<-predict(preObj, testing$diagnosis)
View(testing)
confusionMatrix(testing$diagnosis, predict(modelFit, testing))
install.packages("shiny")
PMCC_Stage.III.and.IV.Melanoma.Database.Coded.V4 <- read.csv("~/Desktop/PMCC_Stage III and IV Melanoma Database Coded V4.csv")
View(PMCC_Stage.III.and.IV.Melanoma.Database.Coded.V4)
df <- read.csv("~/Desktop/PMCC_Stage III and IV Melanoma Database Coded V4.csv")
View(df)
logTrans<-glm(Intransit.Disease.Y.N~Age.at.Dx, data = df, family="binomial")
summary(logTrans)
hist(df$Age.at.Dx)
library(HMISC)
??cut2
library(Hmisc)
?cut2
cut2(Age.at.Dx, g = 3)
cut2(df$Age.at.Dx, g = 3)
cut2(df$Age.at.Dx, 3)
table(cut2(df$Age.at.Dx, 3))
table(cut2(df$Age.at.Dx, g=10))
table(cut2(df$Age.at.Dx, g=33))
table(cut2(df$Age.at.Dx, g=3))
df$agecat<- cut2(df$Age.at.Dx, g=3)
View(df)
View(df$agecat)
table(df$agecat, df$Intransit.Disease.Y.N)/length(df$agecat)
table(df$agecat, df$Intransit.Disease.Y.N)/length(table(df$agecat, df$Intransit.Disease.Y.N)
)
table(df$agecat, df$Intransit.Disease.Y.N)/length(df$agecat)
table(df$Intransit.Disease.Y.N, df$agecat)/length(df$agecat)
table(df$Intransit.Disease.Y.N, df$agecat)
table(df$agecat, df$Intransit.Disease.Y.N)
LogTrans2<-glm(Intransit.Disease.Y.N~Age.at.Dx + Breslow.s.Thickness..mm. + Ulceration, data = df, family="binomial")
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
install.packages("Shiny")
install.packages("shiny")
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
shinyapps::setAccountInfo(name='mattyreesy', token='CDFC758590C7C9EFF5A1D9BEC9F8048D', secret='R8pfNCpMOnuhRa+keqx1EV0ZBeZ2DOIbKafGZD6K')
install.packages(Devtools)
package.skeleton()
install.packages("yhatr")
data(iris);library(ggplot2)
names(iris)
table(iris$Species)
inTrain<-createDataPartition(y=iris$species, p = 0.7, list = FALSE)
??createDataPartition
library(caret)
inTrain<-createDataPartition(y=iris$species, p = 0.7, list = FALSE)
inTrain<-createDataPartition(y=iris$Species, p = 0.7, list = FALSE)
training<-iris[inTrain, ]
View(inTrain)
View(training)
testing<-iris[-inTrain,]
dim(training)
dim(testing)
qplot(Petal.Width, Sepal.Width, colour=Species, data = training)
modFit<-train(Species~., method="rpart", data=training)
print(modFit$finalModel)
modfit
print(modfit)
print(modFit)
modFit
plot(modFit$finalModel, uniform=T, main="Classification Tree")
text(modFit$finalModel, use.n=T, all=T, cex=0.8)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
inTrain<-createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
set.seed(125)
training<-segmentationOriginal[inTrain, ]
testing<-segmentationOriginal[-inTrain, ]
dim(training);dim(testing)
modFit<-train(Case~., method="rpart", data=training)
print(modFit$finalModel)
plot(odFit$finalModel, uniform=T, main="classification tree")
plot(modFit$finalModel, uniform=T, main="classification tree")
txt(modFit$finalModel, use.n=TRUE, all=TRUE, cex=0.7)
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=0.7)
set.seed(125)
inTrain<-createDataPartition(y=segmentationOriginal$Class, p=0.7, list=FALSE)
training<-segmentationOriginal[inTrain, ]
testing<-segmentationOriginal[-inTrain, ]
modFit<-train(Class~., method="rpart", data=training)
plot(modFit$finalModel, uniform=T, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=0.7)
print(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
modFit<-train(Area~., method="rpart", data=olive)
plot(modFit$finalModel, uniform=T, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=0.7)
print(modFit$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
modFit(newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(SAheart)
modFit<-glm(chd~age+alcohol+adiposity+tobacco+typea+ldl, family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
missClass(testSA, modFit)
modFit
missClass(testSA, modFit(trainSA))
missClass(modFit, testSA)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
View(vowel.train)
vowel.test$y<-as.factor(vowel.test$y)
str(vowel.test$y)
vowel.train$y<-as.factor(vowel.train$y)
str(vowel.train$y)
set.seed(33833)
library(caret)
modFit<-train(y~., data=vowel.train, method="rf", porx=TRUE)
modFit<-train(y~., data=vowel.train, method="rf", porx=TRUE)
modFit<-train(y~., data=vowel.train, method="rf", prox=TRUE)
modFit2<-train(y~., data=vowel.train, method="gbm")
modFit2<-train(y~., data=vowel.train, method="gbm")
pred1<- predict(modFit, vowel.test)
pred1
summary(pred1)
table(pred1, vowel.train$y)
testing$pred1Right<-pred1==vowel.test$y
vowel.test$pred1Right<-pred1==vowel.test$y
table(pred1, vowel.test$y)
?predict
pred1$accuracy
table(pred1==vowel.test$y)
pred2<- predict(modFit2, vowel.test)
table(pred2==vowel.test$y)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modFit<-train(diagnosis~., data=training, method="rf", prox=TRUE)
modFit2<-train(diagnosis~., data=training, method="gbm")
modFit3<-train(diagnosis~., data=training, method="lda")
predDF<-data.frame(modFit, modFit2, modFit3, diagnosis = testing$diagnosis)
predDF<-data.frame(modFit, modFit2, diagnosis = testing$diagnosis)
predDF<-data.frame(modFit, modFit2, modFit3)
pred1<- predict(modFit, testing)
pred2<- predict(modFit2, testing)
pred3<- predict(modFit3, testing)
predDF<-data.frame(pred1, pred2, pred3, diagnosis = testing$diagnosis)
combmodFit<-train(diagnosis~., method="rf", data = predDF)
combPred<-predict(combModFit, predDF)
combPred<-predict(combmodFit, predDF)
table(pred1==test$diagnosis)
table(pred1==testing$diagnosis)
table(pred2==testing$diagnosis)
table(pred3==testing$diagnosis)
table(combPred==testing$diagnosis)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Degrees Farenheit to Celsius Converter"),
sidebarPanel(
numericInput(inputId="DegFar", label="Degrees Farenheit", value= 0,min=-500),
numericInput(inputId="DegCel", label="Degrees Celsius", value= 0,min=-500),
actionButton("goButton", "Go!"),
),
)
end
),
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Degrees Farenheit to Celsius Converter"),
sidebarPanel(
numericInput(inputId="DegFar", label="Degrees Farenheit", value= 0,min=-500),
numericInput(inputId="DegCel", label="Degrees Celsius", value= 0,min=-500),
actionButton("goButton", "Go!")),
mainPanel(
tabsetPanel(
tabPanel('Your results',
h5('Your temperature in Farenheit'), verbatimTextOutput("result"),
h5('Your temperature in Celsius'), verbatimTextOutput("result")),
tabPanel('Plot: Farenheit vs Celsius',
h5('Plot: Farenheit vs Celsius')),
),
)
)
)
---
title: "Developing Data Products - Celsius to Faranheit"
author: "Matthew Rees"
date: "23 July 2014"
output: html_document
runtime: shiny
---
```{r}
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Degrees Farenheit to Celsius Converter"),
sidebarPanel(
numericInput(inputId="DegFar", label="Degrees Farenheit", value= 0,min=-500),
numericInput(inputId="DegCel", label="Degrees Celsius", value= 0,min=-500),
actionButton("goButton", "Go!")),
mainPanel(
tabsetPanel(
tabPanel('Your results',
h3('Your temperature in Farenheit'), verbatimTextOutput("result"),
h3('Your temperature in Celsius'), verbatimTextOutput("result")),
tabPanel('Plot: Farenheit vs Celsius',
h3('Plot: Farenheit vs Celsius')),
),
)
)
)
```
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Degrees Farenheit to Celsius Converter"),
sidebarPanel(
numericInput(inputId="DegFar", label="Degrees Farenheit", value= 0,min=-500),
numericInput(inputId="DegCel", label="Degrees Celsius", value= 0,min=-500),
actionButton("goButton", "Go!")),
mainPanel(
tabsetPanel(
tabPanel('Your results',
h3('Your temperature in Farenheit'), verbatimTextOutput("result")),
tabPanel('Plot: Farenheit vs Celsius',
h3('Plot: Farenheit vs Celsius')),
),
)
)
)
shinyUI(pageWithSidebar(
headerPanel("Estimation of MPG for Cars"),
sidebarPanel(
radioButtons("transmission","Transmission Type:",
list("Automatic"="0","Manual"="1")),
radioButtons("cylinder","Number of Cylinders:",
list("4 Cylinders"="4","6 Cylinders"="6","8 Cylinders"="8")),
textInput(inputId="weight",label="Weight of the car (in 1000lb)"),
textInput(inputId="horsepower",label="Horse Power of the car"),
sliderInput("confint","Confidence Interval:",0,1,0.05),
submitButton('Submit')
),
mainPanel(
tabsetPanel(
tabPanel("Result",verbatimTextOutput("result")),
tabPanel("Plot",plotOutput("plot"))
)
)
))
p("Calculated temperature Farenheit"), verbatimTextOutput("resultfar"),
setwd("~/Desktop/Developing-data-product-course-project")
runApp()
library(shiny)
runApp()
runApp()
runApp()
output$plot<- renderPlot({input$DegCel~(input$DegFar - 32) * (5/9)})
output$plot<- renderPlot(x~input$DegCel~(input$DegFar - 32) * (5/9)})
output$plot<- renderPlot(x~input$DegCel~(input$DegFar - 32) * (5/9))
runApp()
runApp()
